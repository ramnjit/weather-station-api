AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Weather Station API

Resources:
  WeatherStationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: {Service: [lambda.amazonaws.com]}
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: ReadSecretPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: ['secretsmanager:GetSecretValue']
                Resource: "arn:aws:secretsmanager:us-east-1:832362088918:secret:eather-api/db-credentials-VDOHVm"

  WeatherStationFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      CodeUri: src/
      Handler: aws_wsgi.handler
      Runtime: python3.12
      Role: !GetAtt WeatherStationFunctionRole.Arn
      VpcConfig:
        SecurityGroupIds: [ sg-07c60cec7e5f0e956 ]
        SubnetIds:
          - subnet-050466863802331de
          - subnet-0eb3f2e82007956d2
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          DB_SECRET_ARN: "arn:aws:secretsmanager:us-east-1:832362088918:secret:eather-api/db-credentials-VDOHVm"
          WSGI_APP: app.app

Outputs:
  ApiUrl:
    Description: "API URL"
    Value: !Sub "https://://${WeatherStationApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"